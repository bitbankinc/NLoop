# syntax = edrevo/dockerfile-plus

# This dockerfile is meant to compile a c-lightning x64 image
# It is using multi stage build:
# * downloader: Download litecoin/bitcoin and qemu binaries needed for c-lightning
# * builder: Compile c-lightning dependencies, then c-lightning itself with static linking
# * final: Copy the binaries required at runtime
# The resulting image uploaded to dockerhub will only contain what is needed for runtime.
# From the root of the repository, run "docker build -t yourimage:yourtag ."

FROM debian:bullseye-slim as downloader

RUN set -ex \
	&& apt-get update \
	&& apt-get install -qq --no-install-recommends dirmngr wget ca-certificates 

RUN update-ca-certificates

WORKDIR /opt

RUN wget -qO /opt/tini "https://github.com/krallin/tini/releases/download/v0.18.0/tini" \
    && echo "12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 /opt/tini" | sha256sum -c - \
    && chmod +x /opt/tini

ARG BITCOIN_VERSION=0.21.1
ENV BITCOIN_TARBALL bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz
ENV BITCOIN_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_TARBALL
ENV BITCOIN_ASC_URL https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc

# wget sometimes complains that bitcoin.org ca-certificate
# is not valid. Since this happens only inside docker image.
# and this image is for test. We just ignore by --no-check-certificate option.
RUN mkdir /opt/bitcoin && cd /opt/bitcoin \
    && wget --no-check-certificate -qO $BITCOIN_TARBALL "$BITCOIN_URL" \
    && wget --no-check-certificate -qO bitcoin.asc "$BITCOIN_ASC_URL" \
    && grep $BITCOIN_TARBALL bitcoin.asc | tee SHA256SUMS.asc \
    && sha256sum -c SHA256SUMS.asc \
    && BD=bitcoin-$BITCOIN_VERSION/bin \
    && tar -xzvf $BITCOIN_TARBALL $BD/bitcoin-cli --strip-components=1 \
    && rm $BITCOIN_TARBALL

ENV DESCHASHPLUGIN_URL https://github.com/fiatjaf/sparko/releases/download/invoicewithdescriptionhash-v1.2/invoicewithdescriptionhash_linux_amd64
ENV DESCHASHPLUGIN_SHA256 E3EA0D076A26D774BA68D1D5E3FE48D267CE02D077933EF3CBAE1FC39007FB11
RUN mkdir /opt/deschashplugin && cd /opt/deschashplugin \
    && wget -qO invoicewithdescriptionhash "$DESCHASHPLUGIN_URL" \
    && echo "$DESCHASHPLUGIN_SHA256  invoicewithdescriptionhash" | sha256sum -c - \
    && chmod a+x invoicewithdescriptionhash

FROM debian:bullseye-slim as builder

ENV LIGHTNINGD_VERSION=v0.10.1
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates autoconf automake build-essential git libtool python3 python3-pip python3-setuptools python3-mako wget gnupg dirmngr git gettext

RUN wget https://zlib.net/zlib-1.2.12.tar.gz \
&& tar xvf zlib-1.2.12.tar.gz \
&& cd zlib-1.2.12 \
&& ./configure \
&& make \
&& make install && cd .. && rm zlib-1.2.12.tar.gz && rm -rf zlib-1.2.12

RUN apt-get install -y --no-install-recommends unzip tclsh \
&& wget -q https://www.sqlite.org/2019/sqlite-src-3290000.zip \
&& unzip sqlite-src-3290000.zip \
&& cd sqlite-src-3290000 \
&& ./configure --enable-static --disable-readline --disable-threadsafe --disable-load-extension \
&& make \
&& make install && cd .. && rm sqlite-src-3290000.zip && rm -rf sqlite-src-3290000

RUN wget -q https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz \
&& tar xvf gmp-6.1.2.tar.xz \
&& cd gmp-6.1.2 \
&& ./configure --disable-assembly \
&& make \
&& make install && cd .. && rm gmp-6.1.2.tar.xz && rm -rf gmp-6.1.2

WORKDIR /opt/lightningd
RUN git clone --recursive https://github.com/ElementsProject/lightning  . && \
    git checkout $LIGHTNINGD_VERSION

ARG DEVELOPER=0
ENV PYTHON_VERSION=3
RUN pip3 install mrkd
RUN ./configure --prefix=/tmp/lightning_install --enable-static && make -j3 DEVELOPER=${DEVELOPER} && make install


FROM mcr.microsoft.com/dotnet/aspnet:6.0-bullseye-slim-amd64 as plugins

ARG TRACE_TOOLS=false
ENV TRACE_TOOLS=$TRACE_TOOLS
ENV TRACE_LOCATION=/opt/traces
VOLUME /opt/traces

COPY --from=downloader /opt/tini /usr/bin/tini

RUN apt-get update && apt-get install -y --no-install-recommends socat inotify-tools python3 python3-pip \
    && \
    ( ! $TRACE_TOOLS || \
        ( \
            apt-get install -y --no-install-recommends perl linux-base curl ca-certificates && \
            mkdir FlameGraph && cd FlameGraph && \
            curl -Lo FlameGraph.tar.gz "https://github.com/brendangregg/FlameGraph/archive/v1.0.tar.gz" && \
            tar -zxvf FlameGraph.tar.gz --strip-components=1 && rm FlameGraph.tar.gz && cd .. \
        ) \
    ) \
    && rm -rf /var/lib/apt/lists/*

ENV LIGHTNINGD_DATA=/root/.lightning
ENV LIGHTNINGD_RPC_PORT=9835
ENV LIGHTNINGD_PORT=9735
ENV LIGHTNINGD_NETWORK=bitcoin

RUN mkdir $LIGHTNINGD_DATA && \
    mkdir /etc/bundledplugins && \
    mkdir $LIGHTNINGD_DATA/plugins && \
    touch $LIGHTNINGD_DATA/config

VOLUME [ "/root/.lightning" ]

# -- plugins --
ARG EXTRA_PLUGINS='--recurse-submodules=csvexportpays \
--recurse-submodules=graphql \
--recurse-submodules=jwt-factory \
--recurse-submodules=python-teos \
--recurse-submodules=trustedcoin \
--recurse-submodules=webhook'

RUN apt-get update && apt-get install -y --no-install-recommends build-essential python3-wheel python3-dev python3-venv libleveldb-dev pkg-config libc-bin git libpq-dev postgresql

COPY --from=builder /opt/lightningd/ /opt/lightningd/

RUN mkdir /tmp/oldplugins && mv /opt/lightningd/plugins/* /tmp/oldplugins/ && \
    rm -rf /opt/lightningd/plugins && \
    cd /opt/lightningd/ && \
    git clone --depth 1 --shallow-submodules -j4 \
        ${EXTRA_PLUGINS} \
        https://github.com/lightningd/plugins /opt/lightningd/plugins && \
    cd /opt/lightningd/plugins && \
    pip3 install setuptools && \
    find -name requirements.txt -exec pip3 install -r {} \; && \
    mv /tmp/oldplugins/* /opt/lightningd/plugins/ && rmdir /tmp/oldplugins
# -- --
# prepare nloopd as a plugin
INCLUDE+ NLoop.Server/Dockerfile.debug

FROM plugins AS clightning_final

COPY --from=builder /tmp/lightning_install/ /usr/local/
COPY --from=downloader /opt/bitcoin/bin /usr/bin
COPY --from=downloader /opt/deschashplugin $LIGHTNINGD_DATA/plugins
COPY --from=downloader /opt/deschashplugin /etc/bundledplugins
COPY --from=final /app/nloopd /opt/lightningd/plugins
#RUN mv /app/nloopd /opt/lightningd/plugins

COPY "tests/NLoop.Server.Tests/Dockerfiles/lightning-entrypoint.sh" ./entrypoint.sh

EXPOSE 9735 9835
ENTRYPOINT  [ "/usr/bin/tini", "-g", "--", "./entrypoint.sh" ]
